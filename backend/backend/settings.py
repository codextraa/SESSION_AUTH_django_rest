"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "XXXXXX")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

# Django environment
DJANGO_ENV = os.getenv("DJANGO_ENV")

# ALOWED_HOSTS based on Django environment
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")

# NEXT_API_SECRET_KEY
NEXT_API_SECRET_KEY = os.getenv("NEXT_API_SECRET_KEY")

# MEDIA_URLS
HTTP_MEDIA_URL = os.getenv("HTTP_MEDIA_URL")
HTTPS_MEDIA_URL = os.getenv("HTTPS_MEDIA_URL")

# localhost or NGINX reverse proxy
HTTPS = os.getenv("HTTPS") == "True"
if HTTPS or DJANGO_ENV == "production":
    BACKEND_URL = os.getenv("HTTPS_BACKEND_URL")
    FRONTEND_URL = os.getenv("HTTPS_FRONTEND_URL")
else:
    BACKEND_URL = os.getenv("HTTP_BACKEND_URL")
    FRONTEND_URL = os.getenv("HTTP_FRONTEND_URL")

# Application definition

APP_NAME = os.getenv("APP_NAME")

INSTALLED_APPS = [
    "core_db",
    "auth_api",
    "corsheaders",
    "rest_framework",
    "social_django",
    "drf_spectacular",
    "phonenumber_field",
    "phone_verify",
    "storages",
    "django_filters",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "backend.middlewares.RestrictDirectApiMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

PYTHONUNBUFFERED = 1

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Static files
STATIC_URL = "/static/"
if HTTPS:
    STATIC_ROOT = "/app/static"
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Media files
if DJANGO_ENV == "development":
    if HTTPS:
        MEDIA_URL = HTTPS_MEDIA_URL
    else:
        MEDIA_URL = HTTP_MEDIA_URL
    MEDIA_ROOT = "/app/media"
else:
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
    MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"
    AWS_DEFAULT_ACL = None
    AWS_S3_FILE_OVERWRITE = False

DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{os.environ.get('REDIS_HOST')}:{os.environ.get('REDIS_PORT')}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Authentication backends

AUTHENTICATION_BACKENDS = (
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.facebook.FacebookOAuth2",
    # 'social_core.backends.instagram.InstagramOAuth2',
    # 'social_core.backends.twitter.TwitterOAuth',
    # 'social_core.backends.linkedin.LinkedinOAuth2',
    "social_core.backends.github.GithubOAuth2",
    "django.contrib.auth.backends.ModelBackend",
)

# Pipelines

SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "social_core.pipeline.user.get_username",
    "auth_api.pipeline.user_creation",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
)

# Social django settings

SOCIAL_AUTH_JSONFIELD_ENABLED = True

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ["email", "profile"]

SOCIAL_AUTH_FACEBOOK_KEY = os.getenv("FACEBOOK_CLIENT_ID")
SOCIAL_AUTH_FACEBOOK_SECRET = os.getenv("FACEBOOK_CLIENT_SECRET")
SOCIAL_AUTH_FACEBOOK_SCOPE = ["email"]
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    "fields": "id,name,email,picture.width(500).height(500)",
}

SOCIAL_AUTH_GITHUB_KEY = os.getenv("GITHUB_CLIENT_ID")
SOCIAL_AUTH_GITHUB_SECRET = os.getenv("GITHUB_CLIENT_SECRET")

# SOCIAL_AUTH_INSTAGRAM_KEY = '<INSTAGRAM_CLIENT_ID>' # business app required
# SOCIAL_AUTH_INSTAGRAM_SECRET = '<INSTAGRAM_CLIENT_SECRET>'

# SOCIAL_AUTH_TWITTER_KEY = '<TWITTER_API_KEY>' # privacy policy link required
# SOCIAL_AUTH_TWITTER_SECRET = '<TWITTER_API_SECRET>'

# SOCIAL_AUTH_LINKEDIN_KEY = '<LINKEDIN_CLIENT_ID>' # LinkedIn page required
# SOCIAL_AUTH_LINKEDIN_SECRET = '<LINKEDIN_CLIENT_SECRET>'

# Twilio Settings

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_PHONE_NUMBER")

# Recaptcha Settings
RECAPTCHA_SITE_KEY = os.getenv("RECAPTCHA_SITE_KEY")
RECAPTCHA_SECRET_KEY = os.getenv("RECAPTCHA_SECRET_KEY")

# REST Framework Settings

# Never give comma after drf_spectacular.openapi.AutoSchema
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": ("drf_spectacular.openapi.AutoSchema"),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        "rest_framework.permissions.IsAdminUser",
    ),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_THROTTLE_CLASSES": ("rest_framework.throttling.ScopedRateThrottle",),
    "DEFAULT_THROTTLE_RATES": {
        "email_otp": "1/min",
        "email_verify": "1/min",
        "password_reset": "1/min",
        "phone_otp": "1/min",
    },
    "ORDERING_PARAM": "ordering",
}

# Session Settings

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 60 * 60 * 24  # 1 day
SESSION_COOKIE_SAME_SITE = "Lax"
SESSION_COOKIE_SECURE = True  # Secure session cookies
SESSION_CACHE_ALIAS = "default"

# CORS Settings

CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "http://localhost:3000").split(
    ","
)

CORS_ALLOW_CREDENTIALS = True

# CSRF Settings

CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "http://localhost:3000").split(
    ","
)

CSRF_COOKIE_SECURE = True  # Ensures the CSRF cookie is sent only over HTTPS
CSRF_COOKIE_HTTPONLY = True  # Must be False since JavaScript needs to read the token
CSRF_COOKIE_SAMESITE = "Lax"  # Prevent cross-origin requests
CSRF_COOKIE_AGE = 60 * 60 * 24  # 1 day

# Session Settings

SESSION_COOKIE_SECURE = True  # Secure session cookies

# User Settings

AUTH_USER_MODEL = "core_db.User"

# Email Settings

# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = os.getenv("EMAIL_HOST_USER")
EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Security Settings
MAX_LOGIN_FAILURE_LIMIT = 5
SECURE_PROXY_SSL_HEADER = (
    "HTTP_X_FORWARDED_PROTO",
    "https",
)  # Only if Nginx is reverse proxied

# Monitoring

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "": {  # Root logger
            "level": "INFO",
            "handlers": ["console", "file"],
        },
        "django": {  # Django-specific logger
            "level": "INFO",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        "botocore": {  # botocore logger (for S3/AWS interactions)
            "level": "WARNING",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        "boto3": {  # boto3 logger
            "level": "WARNING",
            "handlers": ["console", "file"],
            "propagate": False,
        },
        "s3transfer": {  # s3transfer logger (used by boto3 for file transfers)
            "level": "WARNING",
            "handlers": ["console", "file"],
            "propagate": False,
        },
    },
}
